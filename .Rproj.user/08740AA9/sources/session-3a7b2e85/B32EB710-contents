CacheReporter <- R6::R6Class("CacheReporter",
  inherit = testthat::ProgressReporter,
  public = list(
    
    ctxt_n_cache = 0,
    
    
    
    show_header = function() {
      self$cat_line(
        colourise(symbol$tick, "success"), " | ",
        colourise("F", "failure"), " ",
        colourise("W", "warning"), " ",
        colourise("S", "skip"), " ",
        colourise("C", "cache"), " ",
        colourise(" OK", "success"),
        " | ", "Context"
      )
    },
    
    status_data = function() {
      list(
        n = self$ctxt_n,
        n_ok = self$ctxt_n_ok,
        n_fail = self$ctxt_n_fail,
        n_warn = self$ctxt_n_warn,
        n_skip = self$ctxt_n_skip,
        n_cache = self$ctxt_n_cache,
        name = self$ctxt_name
      )
    },
    
    show_status = function(complete = FALSE, time = 0, pad = FALSE) {
      data <- self$status_data()
      if (complete) {
        if (data$n_fail > 0) {
          status <- col_red(symbol$cross)
        } else {
          status <- col_green(symbol$tick)
        }
      } else {
        # Do not print if not enough time has passed since we last printed.
        if (!self$should_update()) {
          return()
        }
        status <- spinner(self$frames, data$n)
        if (data$n_fail > 0) {
          status <- colourise(status, "failure")
        } else if (data$n_warn > 0) {
          status <- colourise(status, "warning")
        }
      }
      
      col_format <- function(n, type) {
        if (n == 0) {
          " "
        } else {
          colourise(n, type)
        }
      }
      
      message <- paste0(
        status, " | ",
        col_format(data$n_fail, "fail"), " ",
        col_format(data$n_warn, "warn"), " ",
        col_format(data$n_skip, "skip"), " ",
        col_format(data$n_cache, "skip"), " ",
        sprintf("%3d", data$n_ok),
        " | ", data$name
      )
      
      if (complete && time > self$min_time) {
        message <- paste0(
          message,
          col_grey(sprintf(" [%.1fs]", time))
        )
      }
      
      if (pad) {
        message <- strpad(message, self$width)
        message <- ansi_substr(message, 1, self$width)
      }
      
      if (!complete) {
        message <- strpad(message, self$width)
        self$cat_tight(self$cr(), message)
      } else {
        self$cat_line(self$cr(), message)
      }
    }
  )
)

spinner <- function(frames, i) {
  frames[((i - 1) %% length(frames)) + 1]
}

strpad <- function(x, width = cli::console_width()) {
  n <- pmax(0, width - cli::ansi_nchar(x))
  paste0(x, strrep(" ", n))
}