expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
x
devtools::load_all(".")
x
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
x
devtools::load_all(".")
x
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
z
x
devtools::load_all(".")
x
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
x
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
x
?lockBinding
pkgload::ns_env()
pkgload::ns_env
pkgload::pkg_name
usethis::use_package("pkgload")
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
x
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
usethis::use_r("utils-my_ns")
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
x
? withr::defer
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
x
dummy2
bindingIsLocked(dummy2)
bindingIsLocked(dummy2, env = my_ns())
bindingIsLocked(@, env = my_ns())
bindingIsLocked("dummy2", env = my_ns())
View(list_my_package)
usethis::use_package("withr")
usethis::use_r("utils-local_mock")
?rlang::splice()
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
x
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
devtools::test()
devtools::load_all(".")
devtools::test()
dummy(1)
devtools::load_all(".")
devtools::test()
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
z
x
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
}) -> x
z
x
pkgload:::desc_desc_get
?utils::packageDescription()
desc::desc()
?desc::desc()
desc::desc() -> d
d$get_field("name")
d$get_field()
d$get("Title")
d$get("Package")
d$get("Package") |> unname9
d$get("Package") |> unname()
usethis::use_package("desc")
devtools::load_all(".")
my_ns()
packageDescription("desc")
usethis::use_r("utils-my_fns")
?makeActiveBinding()
makeActiveBinding(
"test_active_binding",
function(x = 1) x + 1,
global_env()
)
test_active_binding
test_active_binding()
test_active_binding
test_active_binding
test_active_binding <- 3
makeActiveBinding(
"test_active_binding",
function(x = 1) print(x + 1),
global_env()
)
test_active_binding <- 3
test_active_binding <- 3
test_active_binding
test_active_binding <- 5
rm(test_active_binding)
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::test()
usethis::use_r("utils-cache_dir")
basename(getwd())
list.files(getwd())
list.files(wd, "\\.Rproj$")
wd <- getwd()
list.files(wd, "\\.Rproj$")
file.path(wd, "tests", "testthat", "_testcache")
cli_abort(c(
"{.code tests} directory not found"
))
devtools::load_all(".")
cache_dir()
?devtools::test
my_fns()
lapply(my_fns(), deparse)
usethis::use_r("get_invalidated_fns")
cache_dir()
dir <- file.path(cache_dir(), "definitions")
dir.exists(dir)
?sub
my_fns()
text <- my_fns() |>
map(deparse)
text
?unlink
?writeLines
packageDescription("testthat")
desc::desc("testthat")
desc::desc(package = "testthat")
usethis::use_package("brio")
?brio::writeLines
devtools::load_all(".")
cached_definitions_set()
devtools::load_all(".")
cached_definitions_set()
map(my_fns(), deparse)
? jsonlite::toJSON
my_fns() |>
map(deparse) |>
jsonlite::toJSON(pretty = TRUE)
my_fns() |>
map(deparse) |>
jsonlite::toJSON() |>
jsonlite::prettify()
devtools::load_all(".")
cached_definitions_set()
path <- file.path(cache_dir(), "_function_definitions.json")
jsonlite::read_json(path)
jsonlite::read_json(
path,
simplifyVector = TRUE,
simplifyMatrix = FALSE,
simplifyDataFrame = FALSE
)
cached_fns()
my_fns() |> map(deparse)
cached_fns()
cached_definitions_get()
devtools::load_all(".")
cached_definitions_get()
cached_definitions_get()
cached_definitions_get()
my_fns() |> map(deparse)
all_funs <- union(names(defs_curr), names(defs_prev))
devtools::load_all(".")
get_invalidated_fns()
devtools::load_all(".")
get_invalidated_fns()
devtools::load_all(".")
get_invalidated_fns()
cached_definitions_set()
get_invalidated_fns()
curr_context()
View(curr_context)
curr_context_rstudio()
devtools::load_all(".")
get_invalidated_fns()
curr_context()
devtools::load_all(".")
curr_context()
devtools::load_all(".")
curr_context()
rstudioapi::documentPath()
curr_context()
usethis::use_r("read_test_cache")
usethis::use_r("utils-read_json")
devtools::load_all(".")
cache_dir()
devtools::load_all(".")
read_test_cache(curr_context(), desc)[[1]]
desc
curr_context()
read_test_cache(curr_context(), desc)[[1]]
usethis::use_r("test_cache_write")
View(read_json)
usethis::use_r("utils-write_json")
devtools::load_all(".")
View(write_cache)
View(write_cache)
View(test_that)
devtools::load_all(".")
?cli::`inline-markup`
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
rstudioapi::getConsoleEditorContext()
rstudioapi::getConsoleEditorContext()
rstudioapi::terminalContext()
rstudioapi::getSourceEditorContext()
rstudioapi::getSourceEditorContext()
rstudioapi::getSourceEditorContext()
rstudioapi::getSourceEditorContext()
rstudioapi::getConsoleEditorContext()
rstudioapi::getConsoleEditorContext()
rstudioapi::getConsoleEditorContext()
rstudioapi::getConsoleEditorContext()
rstudioapi::getConsoleEditorContext()
rstudioapi::getConsoleEditorContext()
rstudioapi::getActiveDocumentContext()
rstudioapi::getConsoleEditorContext()
rstudioapi::getActiveDocumentContext()
window <- list(
rstudioapi::getActiveDocumentContext(),
rstudioapi::getConsoleEditorContext()
)
console <- list(
rstudioapi::getActiveDocumentContext(),
rstudioapi::getConsoleEditorContext()
)
map2(
window, console, identical
)
rstudioapi::getActiveDocumentContext()
window <- rstudioapi::getActiveDocumentContext()
console <- rstudioapi::getActiveDocumentContext()
list(window, console)
window$path
console$path
rstudioapi::getActiveDocumentContext()
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
View(dummy_function)
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
get_invalidated_fns()
get_invalidated_fns()
cached_definitions_set()
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
View(get_invalidated_fns)
get_invalidated_fns()
devtools::load_all(".")
get_invalidated_fns()
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
get_invalidated_fns()
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
get_invalidated_fns()
View(get_invalidated_fns)
cached_definitions_get()
defs_curr   <- my_fns() |> map(deparse)
defs_prev   <- cached_definitions_get()
all_funs    <- union(names(defs_curr), names(defs_prev))
defs_prev
all_funs
invalidated <- map_lgl(all_funs, ~ !identical(defs_curr[[.x]], defs_prev[[.x]]))
invalidated
all_funs[1] |>
map(~ list(old = defs_prev[[.x]], new = defs_curr[[.x]]))
all_funs[1] |>
set_names() |>
map(~ list(old = defs_prev[[.x]], new = defs_curr[[.x]]))
devtools::load_all(".")
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
?withr::defer
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
?any
View(get_invalidated_fns)
View(my_fns)
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
View(any_outdated)
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_cache_read("dummy_function")[[1]]
test_cache_read("dummy_function")[[1]]$called_functions
test_cache_read("dummy_function")[[1]]$called_functions |> any_outdated()
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
test_that("multiplication works", {
expect_equal(dummy_function(1), 3)
})
devtools::load_all(".")
